{"version":3,"sources":["Common/Loading.tsx","Common/FadeInPicture.tsx"],"names":["Loading","className","animations","loading","Component","FadeInPicture","props","hasLoaded","setState","renderLoading","state","this","mobile","toLowerCase","styles","PictureMobileOnly","style","objectPosition","onLoad","src","title","alt","PictureAnimationWrap","NonloadedPicture","InterlacedPicture"],"mappings":"uMAUeA,E,iLAJX,OAAO,yBAAKC,UAAWC,IAAWC,SAAS,8BAAW,mC,GAHpCC,aCYhBC,E,YACJ,WAAYC,GAA2B,IAAD,8BAClC,4CAAMA,KAOHC,UAAY,WACjB,EAAKC,SAAS,CAAED,WAAW,KATS,EAY/BE,cAAgB,WACrB,OAAI,EAAKC,MAAMH,UAGR,8BAFE,kBAAC,EAAD,OAXP,EAAKG,MAAQ,CACXH,WAAW,GAJqB,E,sEAmB5B,IAAD,OACP,OAAwB,MAArBI,KAAKL,MAAMM,QAAqD,IAAnCD,KAAKL,MAAMM,OAAOC,cAE9C,yBAAKZ,UAAWa,IAAOC,kBAAmBC,MAAO,CAACC,eAAgBN,KAAKL,MAAMM,QAASM,OAAQ,kBAAM,EAAKX,aAAaY,IAAKR,KAAKL,MAAMa,IAAKC,MAAOT,KAAKL,MAAMc,MAAOC,IAAKV,KAAKL,MAAMe,MAKtL,6BACGV,KAAKF,gBACJ,yBAAKR,UAAWa,IAAOQ,qBAAuB,KAAQX,KAAKD,MAAMH,UAAsC,GAA1BO,IAAOS,mBAClF,yBAAKtB,UAAWa,IAAOU,kBAAmBN,OAAQ,kBAAM,EAAKX,aAAaY,IAAKR,KAAKL,MAAMa,IAAKC,MAAOT,KAAKL,MAAMc,MAAOC,IAAKV,KAAKL,MAAMe,Y,GA/BxHjB,aAsCbC","file":"static/js/0.3afe3fa6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport animations from '../StyleModules/Animations.module.css';\n\nclass Loading extends Component {\n\n  render() {\n    return <div className={animations.loading}><div></div><div></div></div>\n  }\n}\n\nexport default Loading","import React, { Component } from 'react'\nimport styles from '../StyleModules/Pictures.module.css';\nimport Loading from './Loading';\n\ninterface CyberPictureProps {\n    src: string;\n    alt: string;\n    title: string;\n    mobile?: string; \n}\n\ninterface CyberPictureState {\n  hasLoaded: boolean;\n}\n\nclass FadeInPicture extends Component<CyberPictureProps, CyberPictureState> {\n  constructor(props: CyberPictureProps) {\n      super(props);\n\n      this.state = {\n        hasLoaded: false\n      }\n  }\n\n  public hasLoaded = () => {\n    this.setState({ hasLoaded: true });\n  }\n\n  public renderLoading = () => {\n    if(!this.state.hasLoaded) {\n      return <Loading />\n    }\n    return <div/>;\n  }\n\n  render() {\n    if(this.props.mobile != null && this.props.mobile.toLowerCase() != \"\") {\n      return (\n        <img className={styles.PictureMobileOnly} style={{objectPosition: this.props.mobile}} onLoad={() => this.hasLoaded()} src={this.props.src} title={this.props.title} alt={this.props.alt} />\n      )\n    }\n\n    return (\n      <div>\n        {this.renderLoading()}\n          <div className={styles.PictureAnimationWrap + \" \" + (!this.state.hasLoaded ? styles.NonloadedPicture : \"\")}>\n            <img className={styles.InterlacedPicture} onLoad={() => this.hasLoaded()} src={this.props.src} title={this.props.title} alt={this.props.alt} />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default FadeInPicture"],"sourceRoot":""}